spring.application.name=app

executor.core-pool-size=50
executor.max-pool-size=${executor.core-pool-size}
executor.queue-capacity=500
executor.thread-name-prefix=pool-bar-

#auth mechanism: userpass preauth jwt keycloak apikey or <none>
#spring.profiles.include=userpass
scheduler.rate.millis = 5000
#logging.level.org.springframework.security.web.authentication=TRACE
#logging.pattern.console=%d{HH:mm:ss.SSS} %-12.12thread %-30.30logger{0} %message%n
logging.level.victor=DEBUG
#print request header (eg for CORS debugging)
logging.level.victor.training.spring.web.security.PrintRequestHeadersFilter=DEBUG
logging.level.p6spy=INFO
#logging.level.org.springframework.security.web.FilterChainProxy=DEBUG

spring.cloud.openfeign.client.config.drinksApi.url=http://localhost:8080

#logging.level.org.hibernate.SQL=DEBUG
logging.level.graphql=DEBUG
#logging.level.org.springframework=DEBUG

#spring.cache.type=simple #default = isolated, in-memory cache

# actuator
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
management.endpoint.health.show-details=always

#all requests to /actuator/** must bring header Authorization: Basic YWN0dWF0b3I6YWN0dWF0b3I=
actuator.security.username=actuator
actuator.security.password={bcrypt}$2a$10$d7FdiwU//WKwtVHT5eS3RezK79VOOe5ijMCVQXhGJlcR0aS8vZPwG
# the above is the bcrypt ("hashed") encoded of 'actuator' -> see victor.training.crypto.BCrypt to compute

#used when monitoring cache metrics @see CacheMetricsConfig
#spring.cache.cache-names=user-data

custom-executor.core-pool-size=10
custom-executor.max-pool-size=10
custom-executor.thread-name-prefix=custom-

# [Option2] Spring Cloud Sleuth can apply p6spy to the datasource to log every SQL
#spring.sleuth.jdbc.p6spy.enable-logging=true

# [Option1] Manual inject p6spy in the jdbc url:
#spring.datasource.url=jdbc:p6spy:h2:tcp://localhost:9092/~/test
#spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver

#spring.datasource.url=jdbc:h2:tcp://localhost:9092/~/test
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=sa
spring.jpa.hibernate.ddl-auto=create

# injected in OpenAPI object
api.info.title=My Wonder API
api.info.version=1.2
api.info.contact.name=John

feature-flags=

dynamic.prop = yellow

teacher.bio.uri.base=http://localhost:8082

#SSO with KeyCloak
#keycloak.auth-server-url=http://localhost:8180/auth
#keycloak.realm=LearningRealm
#keycloak.resource=spring-app
#keycloak.public-client=false
#keycloak.principal-attribute=preferred_username
#keycloak.credentials.secret=tFaGavjRrSVlDQLGz5CxaTZ5rsMbPJ6h




#bug in Spring Boot 2.6 + Keycoak https://stackoverflow.com/questions/70207564/spring-boot-2-6-regression-how-can-i-fix-keycloak-circular-dependency-in-adapte
spring.main.allow-circular-references=true

# Create/Parse JWT tokens
jwt.signature.shared.secret.base64=c2VjcmV0TWFyZQ==


resilience4j.ratelimiter.metrics.enabled=true
resilience4j.ratelimiter.instances.rateLimiterApi.register-health-indicator=true
resilience4j.ratelimiter.instances.rateLimiterApi.limit-for-period=5
resilience4j.ratelimiter.instances.rateLimiterApi.limit-refresh-period=60s
resilience4j.ratelimiter.instances.rateLimiterApi.timeout-duration=0s
resilience4j.ratelimiter.instances.rateLimiterApi.allow-health-indicator-to-fail=true
resilience4j.ratelimiter.instances.rateLimiterApi.subscribe-for-events=true
resilience4j.ratelimiter.instances.rateLimiterApi.event-consumer-buffer-size=50

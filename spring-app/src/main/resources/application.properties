spring.application.name=app

#auth mechanism: userpass preauth jwt keycloak apikey or <none>
#spring.profiles.include=userpass

#logging.level.org.springframework.security.web.authentication=TRACE
#logging.pattern.console=%d{HH:mm:ss.SSS} %-12.12thread %-30.30logger{0} %message%n
logging.level.victor=DEBUG
#print request header (eg for CORS debugging)
logging.level.victor.training.spring.web.security.PrintRequestHeadersFilter=DEBUG
logging.level.p6spy=INFO
#logging.level.org.springframework.security.web.FilterChainProxy=DEBUG

spring.cloud.openfeign.client.config.drinks.url=http://localhost:8080

#logging.level.org.hibernate.SQL=DEBUG
logging.level.graphql=DEBUG
#logging.level.org.springframework=DEBUG

#spring.cache.type=simple #default = isolated, in-memory cache

# actuator pt @cristian
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
management.endpoint.health.show-details=always
# auto-enabled when running on k8s: expose liveness / readiness probes
management.endpoint.health.probes.enabled=true

#all requests to /actuator/** must bring header Authorization: Basic YWN0dWF0b3I6YWN0dWF0b3I=
actuator.security.username=actuator
#actuator.security.password=actuator #AVOID bcrypt equivalent? see victor.training.crypto.BCrypt to compute
actuator.security.password={bcrypt}$2a$10$d7FdiwU//WKwtVHT5eS3RezK79VOOe5ijMCVQXhGJlcR0aS8vZPwG

#used when monitoring cache metrics @see CacheMetricsConfig
#spring.cache.cache-names=user-data

custom-executor.core-pool-size=10
custom-executor.max-pool-size=10
custom-executor.thread-name-prefix=custom-

# [Option2] Spring Cloud Sleuth can apply p6spy to the datasource to log every SQL
#spring.sleuth.jdbc.p6spy.enable-logging=true

# [Option1] Manual inject p6spy in the jdbc url:
#spring.datasource.url=jdbc:p6spy:h2:tcp://localhost:9092/~/test
#spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver

#spring.datasource.url=jdbc:h2:tcp://localhost:9092/~/test
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=sa
spring.jpa.hibernate.ddl-auto=create

# injected in OpenAPI object
api.info.title=My Wonder API
api.info.version=1.2
api.info.contact.name=Jane
api.info.contact.email=jdoe@kc.com

feature-flags=

dynamic.prop = yellow

teacher.bio.uri.base=http://localhost:8082

# A mai bine: pui .../jre/cacerts
# B #server.ssl.key-store=classpath:/

# Create/Parse JWT tokens
jwt.signature.shared.secret.base64=c2VjcmV0TWFyZQ==



# properties to inject in Props.java
props.env=prod
props.gate=123
props.welcomeMessage=Welcome to Spring

props.supportUrls[0]=http://stackoverflow.com
props.supportUrls[1]=http://baeldung.com
props.supportUrls[2]=http://spring.io
props.supportUrls[3]=http://openai.com

props.contactPhones.FR=430123414123
props.contactPhones.RO=401312121414
props.contactPhones.NL=000000000000

props.help.app-id=1251
props.help.file=c:/help-file.pdf
props.help.email=help@spring.io